{"code":"var rgbColor = /^rgb\\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\)$/;\nvar rgbaColor = /^rgba\\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\\.\\d|1(\\.0)?|0(\\.0)?)\\)$/;\nvar rgbColorPercent = /^rgb\\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\\)$/;\nvar rgbaColorPercent = /^rgba\\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\\.\\d|1(\\.0)?|0(\\.0)?)\\)$/;\n/**\n * Validates if the given string is RGB (or RGBA) color or not.\n *\n * @param {any} input The string to validate.\n * @returns {boolean} Returns true if the string is RGB, false otherwise.\n */\nvar isRgbColor = function (input) {\n    var string = input;\n    // Returns false input is not a string\n    if (typeof string !== \"string\")\n        return false;\n    // Replace all white spaces and newlines with empty string\n    string = string.replace(/\\s/g, \"\").replace(/\\n|\\r/, \"\");\n    return (rgbColor.test(string) ||\n        rgbaColor.test(string) ||\n        rgbColorPercent.test(string) ||\n        rgbaColorPercent.test(string));\n};\nexport { isRgbColor };\n//# sourceMappingURL=is-rgb-color.js.map","references":[],"map":"{\"version\":3,\"file\":\"is-rgb-color.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/is-rgb-color.ts\"],\"names\":[],\"mappings\":\"AAAA,IAAM,QAAQ,GACZ,qHAAqH,CAAC;AACxH,IAAM,SAAS,GACb,4FAA4F,CAAC;AAC/F,IAAM,eAAe,GACnB,mEAAmE,CAAC;AACtE,IAAM,gBAAgB,GACpB,mEAAmE,CAAC;AAEtE;;;;;GAKG;AACH,IAAM,UAAU,GAAG,UAAC,KAAU;IAC5B,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,sCAAsC;IACtC,IAAI,OAAO,MAAM,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAE7C,0DAA0D;IAC1D,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAExD,OAAO,CACL,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;QACtB,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5B,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAC9B,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,UAAU,EAAE,CAAC\"}","dts":{"name":"D:/Projects/NPM/js-simple-validate/node_modules/.cache/rollup-plugin-typescript2/placeholder/is-rgb-color.d.ts","writeByteOrderMark":false,"text":"/**\n * Validates if the given string is RGB (or RGBA) color or not.\n *\n * @param {any} input The string to validate.\n * @returns {boolean} Returns true if the string is RGB, false otherwise.\n */\ndeclare const isRgbColor: (input: any) => boolean;\nexport { isRgbColor };\n"}}
