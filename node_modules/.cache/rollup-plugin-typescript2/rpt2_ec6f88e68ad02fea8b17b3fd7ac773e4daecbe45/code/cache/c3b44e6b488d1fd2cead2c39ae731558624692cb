{"code":"/**\n * Validates if the given string decimal or not.\n *\n * @param {any} input The string to validate.\n * @param {any} options.digits The digits of decimal.\n * @param {any} options.force Check exactly a decimal with dot symbol and digits.\n * @returns {boolean} Returns true if the string decimal number, false otherwise.\n */\nvar isDecimal = function (input, options) {\n    // Returns false input is not a string\n    if (typeof input !== \"string\")\n        return false;\n    // Add default options value\n    var digits = (options === null || options === void 0 ? void 0 : options.digits) || 1;\n    var force = Boolean(options === null || options === void 0 ? void 0 : options.force);\n    // Make a regex of digits and force digits number\n    var regExp = new RegExp(\"^[-+]?([0-9]+)?(\\\\.[0-9]{\".concat(digits, \",})\").concat(force ? \"\" : \"?\", \"$\"));\n    // Test if is valid decimal\n    return regExp.test(input);\n};\nexport { isDecimal };\n//# sourceMappingURL=is-decimal.js.map","references":[],"map":"{\"version\":3,\"file\":\"is-decimal.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/is-decimal.ts\"],\"names\":[],\"mappings\":\"AAKA;;;;;;;GAOG;AACH,IAAM,SAAS,GAAG,UAAC,KAAU,EAAE,OAAiB;IAC9C,sCAAsC;IACtC,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAE5C,4BAA4B;IAC5B,IAAM,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,CAAC,CAAC;IACpC,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC;IAEtC,iDAAiD;IACjD,IAAM,MAAM,GAAG,IAAI,MAAM,CACvB,mCAA4B,MAAM,gBAAM,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,MAAG,CAC5D,CAAC;IAEF,2BAA2B;IAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC,CAAC;AAEF,OAAO,EAAE,SAAS,EAAE,CAAC\"}","dts":{"name":"D:/Projects/NPM/js-simple-validate/dist/types/is-decimal.d.ts","writeByteOrderMark":false,"text":"interface Options {\n    force?: boolean;\n    digits?: number;\n}\n/**\n * Validates if the given string decimal or not.\n *\n * @param {any} input The string to validate.\n * @param {any} options.digits The digits of decimal.\n * @param {any} options.force Check exactly a decimal with dot symbol and digits.\n * @returns {boolean} Returns true if the string decimal number, false otherwise.\n */\ndeclare const isDecimal: (input: any, options?: Options) => boolean;\nexport { isDecimal };\n"}}
