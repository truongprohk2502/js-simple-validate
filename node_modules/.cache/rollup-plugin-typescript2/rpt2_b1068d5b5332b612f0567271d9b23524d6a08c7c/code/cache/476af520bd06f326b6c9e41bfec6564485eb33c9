{"code":"/**\n * Validates if the given string is JSON format or not by JSON.parse.\n *\n * @param {string} input - The string to validate.\n * @returns {boolean} - Returns true if the string is JSON format, false otherwise.\n */\nvar isStrictJSON = function (input) {\n    try {\n        JSON.parse(input);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n};\n/**\n * Validates if the given input is JSON object or array of objects.\n *\n * @param {any} input The input to validate.\n * @returns {boolean} Returns true if the input is JSON object or array of objects, false otherwise.\n */\nvar isValidObject = function (input) {\n    if (Array.isArray(input))\n        return input.every(isValidObject);\n    return typeof input === \"object\" && input !== null;\n};\n/**\n * Validates if the given string is JSON format or not.\n *\n * The JSON string must be in type of key/value pairs.\n *\n * @param {any} input The string to validate.\n * @returns {boolean} Returns true if the string is JSON format, false otherwise.\n */\nvar isJsonObject = function (input) {\n    // Returns false input is not a string\n    if (typeof input !== \"string\")\n        return false;\n    // Replace all white spaces and newlines with empty string\n    input = input.replace(/\\s/g, \"\").replace(/\\n|\\r/, \"\");\n    // Check if the string is JSON object\n    var isObjectFormat = /^\\{.*\\}$/.test(input);\n    if (isObjectFormat)\n        return isStrictJSON(input);\n    // Check if the string is JSON array\n    var isArrayFormat = /^\\[.*\\]$/.test(input);\n    if (isArrayFormat) {\n        var isValidArray = isStrictJSON(input);\n        if (!isValidArray)\n            return false;\n        var array = JSON.parse(input);\n        return isValidObject(array);\n    }\n    return false;\n};\nexport { isJsonObject };\n//# sourceMappingURL=is-json-object.js.map","references":[],"map":"{\"version\":3,\"file\":\"is-json-object.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/is-json-object.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;GAKG;AACH,IAAM,YAAY,GAAG,UAAC,KAAa;IACjC,IAAI,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,WAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAEF;;;;;GAKG;AACH,IAAM,aAAa,GAAG,UAAC,KAAU;IAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC5D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC;AACrD,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,IAAM,YAAY,GAAG,UAAC,KAAU;IAC9B,sCAAsC;IACtC,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAE5C,0DAA0D;IAC1D,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAEtD,qCAAqC;IACrC,IAAM,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,cAAc;QAAE,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;IAE/C,oCAAoC;IACpC,IAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,IAAI,aAAa,EAAE,CAAC;QAClB,IAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY;YAAE,OAAO,KAAK,CAAC;QAChC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAe,CAAC;QAC9C,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,OAAO,EAAE,YAAY,EAAE,CAAC\"}","dts":{"name":"D:/Projects/NPM/js-simple-validate/node_modules/.cache/rollup-plugin-typescript2/placeholder/is-json-object.d.ts","writeByteOrderMark":false,"text":"/**\n * Validates if the given string is JSON format or not.\n *\n * The JSON string must be in type of key/value pairs.\n *\n * @param {any} input The string to validate.\n * @returns {boolean} Returns true if the string is JSON format, false otherwise.\n */\ndeclare const isJsonObject: (input: any) => boolean;\nexport { isJsonObject };\n"}}
