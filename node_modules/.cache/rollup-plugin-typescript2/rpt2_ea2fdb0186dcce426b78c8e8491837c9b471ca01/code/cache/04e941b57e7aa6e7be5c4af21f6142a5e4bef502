{"code":"var notBase64Regex = /[^A-Z0-9+\\/=]/i;\nvar urlSafeBase64Regex = /^[A-Z0-9_\\-]*$/i;\n/**\n * Validates if the given string is Base64 format or not.\n *\n * @param {any} input The string to validate.\n * @param {Options} options An optional configuration object.\n * @param {boolean} options.isUrlSafe Tests the string is url safe.\n * @returns {boolean} Returns true if the string is Base64 string, false otherwise.\n */\nvar isBase64 = function (input, options) {\n    // Returns false input is not a string\n    if (typeof input !== \"string\")\n        return false;\n    // Check if string is URL Base64 format\n    if (options === null || options === void 0 ? void 0 : options.isUrlSafe)\n        return urlSafeBase64Regex.test(input);\n    var len = input.length;\n    // If string is not matched with Base64 regex\n    if (len % 4 !== 0 || notBase64Regex.test(input))\n        return false;\n    // Find the first \"=\" character\n    var firstPaddingChar = input.indexOf(\"=\");\n    // If does not exist \"=\" character\n    if (firstPaddingChar === -1)\n        return true;\n    // If string ends with \"=\" character\n    if (firstPaddingChar === len - 1)\n        return true;\n    // If string ends with double \"=\" character\n    if (firstPaddingChar === len - 2 && input[len - 1] === \"=\")\n        return true;\n    return false;\n};\nexport { isBase64 };\n//# sourceMappingURL=is-base-64.js.map","references":[],"map":"{\"version\":3,\"file\":\"is-base-64.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/is-base-64.ts\"],\"names\":[],\"mappings\":\"AAAA,IAAM,cAAc,GAAG,gBAAgB,CAAC;AACxC,IAAM,kBAAkB,GAAG,iBAAiB,CAAC;AAM7C;;;;;;;GAOG;AACH,IAAM,QAAQ,GAAG,UAAC,KAAU,EAAE,OAAiB;IAC7C,sCAAsC;IACtC,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAE5C,uCAAuC;IACvC,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS;QAAE,OAAO,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAE9D,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;IAEzB,6CAA6C;IAC7C,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IAE9D,+BAA+B;IAC/B,IAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAE5C,kCAAkC;IAClC,IAAI,gBAAgB,KAAK,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAEzC,oCAAoC;IACpC,IAAI,gBAAgB,KAAK,GAAG,GAAG,CAAC;QAAE,OAAO,IAAI,CAAC;IAE9C,2CAA2C;IAC3C,IAAI,gBAAgB,KAAK,GAAG,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG;QAAE,OAAO,IAAI,CAAC;IAExE,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,OAAO,EAAE,QAAQ,EAAE,CAAC\"}","dts":{"name":"D:/Projects/NPM/js-simple-validate/dist/types/is-base-64.d.ts","writeByteOrderMark":false,"text":"interface Options {\n    isUrlSafe: boolean;\n}\n/**\n * Validates if the given string is Base64 format or not.\n *\n * @param {any} input The string to validate.\n * @param {Options} options An optional configuration object.\n * @param {boolean} options.isUrlSafe Tests the string is url safe.\n * @returns {boolean} Returns true if the string is Base64 string, false otherwise.\n */\ndeclare const isBase64: (input: any, options?: Options) => boolean;\nexport { isBase64 };\n"}}
